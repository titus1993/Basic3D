/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Codigo3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[2,7],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[13,17,19,23,24,25,29,30,32,35,36,37,38,39,40,41,42,43,44,45,46,62,65,66],$Vr=[1,87],$Vs=[1,82],$Vt=[1,83],$Vu=[1,84],$Vv=[1,86],$Vw=[1,78],$Vx=[22,56,57,58,59,60,61,64],$Vy=[10,22,49,50,51,52,53,54,56,57,58,59,60,61,64],$Vz=[20,22];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"L_METODOS":4,"EOF":5,"METODO":6,"TVoid":7,"TMain":8,"(":9,")":10,"{":11,"L_SENTENCIA":12,"}":13,"Id":14,"L_SENTENCIAS":15,"SENTENCIA":16,"Etq":17,":":18,"Temp":19,"=":20,"EXP":21,";":22,"TS":23,"TH":24,"TP":25,"HEAP":26,"POOL":27,"STACK":28,"TGoto":29,"TIf":30,"RELACIONAL":31,"TExit":32,"Num":33,"FUNCIONES_PRIMITIVAS":34,"ToutStr":35,"ToutNum":36,"TinStr":37,"TShow":38,"TgetBool":39,"TgetNum":40,"TinNum":41,"TgetRandom":42,"TgetStrLength":43,"TgetArrLength":44,"TAmbito":45,"Tsbg":46,",":47,"VAL":48,"==":49,"!=":50,">":51,">=":52,"<":53,"<=":54,"UNARIOS":55,"+":56,"-":57,"*":58,"/":59,"^":60,"%":61,"THeap":62,"[":63,"]":64,"TPool":65,"TStack":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"TVoid",8:"TMain",9:"(",10:")",11:"{",13:"}",14:"Id",17:"Etq",18:":",19:"Temp",20:"=",22:";",23:"TS",24:"TH",25:"TP",29:"TGoto",30:"TIf",32:"TExit",33:"Num",35:"ToutStr",36:"ToutNum",37:"TinStr",38:"TShow",39:"TgetBool",40:"TgetNum",41:"TinNum",42:"TgetRandom",43:"TgetStrLength",44:"TgetArrLength",45:"TAmbito",46:"Tsbg",47:",",49:"==",50:"!=",51:">",52:">=",53:"<",54:"<=",56:"+",57:"-",58:"*",59:"/",60:"^",61:"%",62:"THeap",63:"[",64:"]",65:"TPool",66:"TStack"},
productions_: [0,[3,2],[4,2],[4,1],[6,7],[6,7],[12,1],[12,0],[15,2],[15,1],[16,2],[16,4],[16,4],[16,4],[16,4],[16,4],[16,4],[16,4],[16,3],[16,7],[16,5],[16,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,6],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[48,1],[48,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[21,1],[21,1],[21,1],[55,1],[55,1],[55,1],[55,1],[26,4],[27,4],[28,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			Tabla3D = $$[$0-1];
		
break;
case 2:

			for(var i = 0; i < $$[$0].length; i++){
				$$[$0-1].push($$[$0][i]);
			}
			this.$ = $$[$0-1];
		
break;
case 3: case 49: case 50: case 51: case 56:

			this.$ = $$[$0];
		
break;
case 4:

			var metodo = new Metodo("void", "main", _$[$0-6].first_line, _$[$0-6].first_column + 1, new Array(), null);
			var simbolo = new Simbolo ("void", "main", "metodo", -1, 0, _$[$0-6].first_line, _$[$0-6].first_column + 1, $$[$0-1], metodo);
			metodo.Simbolo = simbolo;
			for(var i = 0; i < $$[$0-1].length; i++){
				$$[$0-1][i].Padre = simbolo;
			}
			for(var i = 0; i < $$[$0-1].length-1; i++){	
				$$[$0-1][i].Siguiente = $$[$0-1][i+1];
			}
			this.$ = new Array();
			this.$.push(simbolo);
		
break;
case 5:

			var metodo = new Metodo("void", "main", _$[$0-6].first_line, _$[$0-6].first_column + 1, new Array(), null);
			var simbolo = new Simbolo ("void", "main", "metodo", -1, 0, _$[$0-6].first_line, _$[$0-6].first_column + 1, $$[$0-1], metodo);
			metodo.Simbolo = simbolo;
			for(var i = 0; i < $$[$0-1].length; i++){
				$$[$0-1][i].Padre = simbolo;
			}
			for(var i = 0; i < $$[$0-1].length-1; i++){	
				$$[$0-1][i].Siguiente = $$[$0-1][i+1];				
			}
			this.$ = new Array();
			this.$.push(simbolo);
		
break;
case 6:
this.$ = $$[$0];
break;
case 7:
this.$ = new Array();
break;
case 8:

					
					for(var i = 0; i < $$[$0].length; i++){
						$$[$0-1].push($$[$0][i]);
					}
					this.$ = $$[$0-1];
				
break;
case 9:

					this.$ = $$[$0];
				
break;
case 10:
 
				var simbolo = new Simbolo ("etq", "etq", "etq", -1, 0, _$[$0-1].first_line, _$[$0-1].first_column + 1, null, $$[$0-1]);
				this.$ = new Array();
				this.$.push(simbolo);  
			
break;
case 11:
	
				var nodo = new FNodoExpresion();
				nodo.IniciarNodo(null, null, "temp", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column + 1, null);
				var asigna = new Asignacion(nodo, $$[$0-1], null);
				var simbolo = new Simbolo ("asignacion", $$[$0-3], "asignacion", -1, 0, _$[$0-3].first_line, _$[$0-3].first_column + 1, null, asigna);
				asigna.Simbolo = simbolo;
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 12:
	
				var nodo = new FNodoExpresion();
				nodo.IniciarNodo(null, null, "s", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column + 1, null);
				var asigna = new Asignacion(nodo, $$[$0-1], null);
				var simbolo = new Simbolo ("asignacion", $$[$0-3], "asignacion", -1, 0, _$[$0-3].first_line, _$[$0-3].first_column + 1, null, asigna);
				asigna.Simbolo = simbolo;
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 13:
	
				var nodo = new FNodoExpresion();
				nodo.IniciarNodo(null, null, "h", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column + 1, null);
				var asigna = new Asignacion(nodo, $$[$0-1], null);
				var simbolo = new Simbolo ("asignacion", $$[$0-3], "asignacion", -1, 0, _$[$0-3].first_line, _$[$0-3].first_column + 1, null, asigna);
				asigna.Simbolo = simbolo;
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 14:
	
				var nodo = new FNodoExpresion();
				nodo.IniciarNodo(null, null, "p", $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column + 1, null);
				var asigna = new Asignacion(nodo, $$[$0-1], null);
				var simbolo = new Simbolo ("asignacion", $$[$0-3], "asignacion", -1, 0, _$[$0-3].first_line, _$[$0-3].first_column + 1, null, asigna);
				asigna.Simbolo = simbolo;
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 15: case 16: case 17:
	
				var asigna = new Asignacion($$[$0-3], $$[$0-1], null);
				var simbolo = new Simbolo ("asignacion", "asignacion", "asignacion", -1, 0, _$[$0-3].first_line, _$[$0-3].first_column + 1, null, asigna);
				asigna.Simbolo = simbolo;
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 18:
 
				var simbolo = new Simbolo ("goto", "goto", "goto", -1, 0, _$[$0-2].first_line, _$[$0-2].first_column + 1, null, $$[$0-1]);
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 19:
 
				var si = new If($$[$0-4], $$[$0-1], null);
				var simbolo = new Simbolo ("if", "if", "if", -1, 0, _$[$0-6].first_line, _$[$0-6].first_column + 1, null, si);
				si.Simbolo = simbolo;
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 20:
 
				var simbolo = new Simbolo ("exit", "exit", "exit", -1, 0, _$[$0-4].first_line, _$[$0-4].first_column + 1, null, $$[$0-2]);
				this.$ = new Array();
				this.$.push(simbolo); 
			
break;
case 21:
 
				this.$ = new Array();
				this.$.push($$[$0-1]); 
			
break;
case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32:
 var simbolo = new Simbolo ("getArrLength", "getArrLength", "getArrLength", -1, 0, _$[$0-2].first_line, _$[$0-2].first_column + 1, $$[$0], rep); 
break;
case 33:
 var simbolo = new Simbolo ("sgb", "sgb", "sgb", -1, 0, _$[$0-5].first_line, _$[$0-5].first_column + 1, $$[$0-3], $$[$0-1]); 
break;
case 34:

				this.$ = new FNodoExpresion();
				this.$.IniciarNodo($$[$0-2], $$[$0], "==", "==", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
			
break;
case 35:

				this.$ = new FNodoExpresion();
				this.$.IniciarNodo($$[$0-2], $$[$0], "!=", "!=", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
			
break;
case 36:

				this.$ = new FNodoExpresion();
				this.$.IniciarNodo($$[$0-2], $$[$0], ">", ">", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
			
break;
case 37:

				this.$ = new FNodoExpresion();
				this.$.IniciarNodo($$[$0-2], $$[$0], ">=", ">=", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
			
break;
case 38:

				this.$ = new FNodoExpresion();
				this.$.IniciarNodo($$[$0-2], $$[$0], "<", "<", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
			
break;
case 39:

				this.$ = new FNodoExpresion();
				this.$.IniciarNodo($$[$0-2], $$[$0], "<=", "<=", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
			
break;
case 40:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "num", "num", _$[$0].first_line, _$[$0].first_column + 1, yytext);
		
break;
case 41:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "temp", $$[$0], _$[$0].first_line, _$[$0].first_column + 1, yytext);
		
break;
case 42:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo($$[$0-2], $$[$0], "+", "+", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
		
break;
case 43:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo($$[$0-2], $$[$0], "-", "-", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
		
break;
case 44:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo($$[$0-2], $$[$0], "*", "*", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
		
break;
case 45:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo($$[$0-2], $$[$0], "/", "/", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
		
break;
case 46:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo($$[$0-2], $$[$0], "^", "^", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
		
break;
case 47:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo($$[$0-2], $$[$0], "%", "%", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
		
break;
case 48:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, $$[$0], "-", "-", _$[$0-1].first_line, _$[$0-1].first_column + 1, null);
		
break;
case 52:

			this.$ = $$[$0];
	
break;
case 53:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "s", "s", _$[$0].first_line, _$[$0].first_column + 1, yytext);
		
break;
case 54:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "h", "h", _$[$0].first_line, _$[$0].first_column + 1, yytext);
		
break;
case 55:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "p", "p", _$[$0].first_line, _$[$0].first_column + 1, yytext);
		
break;
case 57:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "heap", "heap", _$[$0-3].first_line, _$[$0-3].first_column + 1, $$[$0-1]);
		
break;
case 58:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "pool", "pool", _$[$0-3].first_line, _$[$0-3].first_column + 1, $$[$0-1]);
		
break;
case 59:

			this.$ = new FNodoExpresion();
			this.$.IniciarNodo(null, null, "stack", "stack", _$[$0-3].first_line, _$[$0-3].first_column + 1, $$[$0-1]);
		
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},o($V1,[2,3]),{8:[1,7],14:[1,8]},{1:[2,1]},o($V1,[2,2]),{9:[1,9]},{9:[1,10]},{10:[1,11]},{10:[1,12]},{11:[1,13]},{11:[1,14]},{12:15,13:$V2,15:16,16:17,17:$V3,19:$V4,23:$V5,24:$V6,25:$V7,26:23,27:24,28:25,29:$V8,30:$V9,32:$Va,34:29,35:$Vb,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,62:$Vn,65:$Vo,66:$Vp},{12:45,13:$V2,15:16,16:17,17:$V3,19:$V4,23:$V5,24:$V6,25:$V7,26:23,27:24,28:25,29:$V8,30:$V9,32:$Va,34:29,35:$Vb,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,62:$Vn,65:$Vo,66:$Vp},{13:[1,46]},{13:[2,6],16:47,17:$V3,19:$V4,23:$V5,24:$V6,25:$V7,26:23,27:24,28:25,29:$V8,30:$V9,32:$Va,34:29,35:$Vb,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,62:$Vn,65:$Vo,66:$Vp},o($Vq,[2,9]),{18:[1,48]},{20:[1,49]},{20:[1,50]},{20:[1,51]},{20:[1,52]},{20:[1,53]},{20:[1,54]},{20:[1,55]},{17:[1,56]},{9:[1,57]},{9:[1,58]},{22:[1,59]},{63:[1,60]},{63:[1,61]},{63:[1,62]},{9:[1,63]},{9:[1,64]},{9:[1,65]},{9:[1,66]},{9:[1,67]},{9:[1,68]},{9:[1,69]},{9:[1,70]},{9:[1,71]},{9:[1,72]},{9:[1,73]},{9:[1,74]},{13:[1,75]},o($V1,[2,4]),o($Vq,[2,8]),o($Vq,[2,10]),{19:$Vr,21:76,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{19:$Vr,21:88,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{19:$Vr,21:89,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{19:$Vr,21:90,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{19:$Vr,21:91,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{19:$Vr,21:92,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{19:$Vr,21:93,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{22:[1,94]},{19:$Vr,31:95,33:$Vv,48:96},{33:[1,97]},o($Vq,[2,21]),{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:98},{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:99},{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:100},{10:[1,101]},{10:[1,102]},{10:[1,103]},{10:[1,104]},{10:[1,105]},{10:[1,106]},{10:[1,107]},{10:[1,108]},{10:[1,109]},{10:[1,110]},{10:[1,111]},{33:[1,112]},o($V1,[2,5]),{22:[1,113]},{22:[2,52],56:[1,114],57:[1,115],58:[1,116],59:[1,117],60:[1,118],61:[1,119]},{19:$Vr,21:120,23:$Vs,24:$Vt,25:$Vu,26:79,27:81,28:80,33:$Vv,48:85,55:77,57:$Vw,62:$Vn,65:$Vo,66:$Vp},{22:[2,49]},{22:[2,50]},{22:[2,51]},o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),o($Vx,[2,56]),o($Vy,[2,40]),o($Vy,[2,41]),{22:[1,121]},{22:[1,122]},{22:[1,123]},{22:[1,124]},{22:[1,125]},{22:[1,126]},o($Vq,[2,18]),{10:[1,127]},{49:[1,128],50:[1,129],51:[1,130],52:[1,131],53:[1,132],54:[1,133]},{10:[1,134]},{64:[1,135]},{64:[1,136]},{64:[1,137]},{22:[2,22]},{22:[2,23]},{22:[2,24]},{22:[2,25]},{22:[2,26]},{22:[2,27]},{22:[2,28]},{22:[2,29]},{22:[2,30]},{22:[2,31]},{22:[2,32]},{47:[1,138]},o($Vq,[2,11]),{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:139},{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:140},{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:141},{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:142},{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:143},{19:$Vr,23:$Vs,24:$Vt,25:$Vu,33:$Vv,48:85,55:144},{22:[2,48]},o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),{29:[1,145]},{19:$Vr,33:$Vv,48:146},{19:$Vr,33:$Vv,48:147},{19:$Vr,33:$Vv,48:148},{19:$Vr,33:$Vv,48:149},{19:$Vr,33:$Vv,48:150},{19:$Vr,33:$Vv,48:151},{22:[1,152]},o($Vz,[2,57]),o($Vz,[2,58]),o($Vz,[2,59]),{33:[1,153]},{22:[2,42]},{22:[2,43]},{22:[2,44]},{22:[2,45]},{22:[2,46]},{22:[2,47]},{17:[1,154]},{10:[2,34]},{10:[2,35]},{10:[2,36]},{10:[2,37]},{10:[2,38]},{10:[2,39]},o($Vq,[2,20]),{10:[1,155]},{22:[1,156]},{22:[2,33]},o($Vq,[2,19])],
defaultActions: {5:[2,1],79:[2,49],80:[2,50],81:[2,51],101:[2,22],102:[2,23],103:[2,24],104:[2,25],105:[2,26],106:[2,27],107:[2,28],108:[2,29],109:[2,30],110:[2,31],111:[2,32],120:[2,48],139:[2,42],140:[2,43],141:[2,44],142:[2,45],143:[2,46],144:[2,47],146:[2,34],147:[2,35],148:[2,36],149:[2,37],150:[2,38],151:[2,39],155:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:console.log(yy_.yytext);
break;
case 2:console.log(yy_.yytext);
break;
case 3:return 7;
break;
case 4:return 24;
break;
case 5:return 23;
break;
case 6:return 25;
break;
case 7:return 62;
break;
case 8:return 65;
break;
case 9:return 66;
break;
case 10:return 45;
break;
case 11:return 29;
break;
case 12:return 8;
break;
case 13:return 30;
break;
case 14:return 18;
break;
case 15:return 22;
break;
case 16:return 63;
break;
case 17:return 64;
break;
case 18:return 11;
break;
case 19:return 13;
break;
case 20:return 49;
break;
case 21:return 20;
break;
case 22:return 50;
break;
case 23:return 52;
break;
case 24:return 54;
break;
case 25:return 51;
break;
case 26:return 53;
break;
case 27:console.log(yy_.yytext); return 58;
break;
case 28:console.log(yy_.yytext);return 59;
break;
case 29:console.log(yy_.yytext);return 57;
break;
case 30:console.log(yy_.yytext);return 56;
break;
case 31:console.log(yy_.yytext);return 61
break;
case 32:console.log(yy_.yytext);return 60;
break;
case 33:console.log(yy_.yytext);return 9;
break;
case 34:console.log(yy_.yytext);return 10;
break;
case 35:return 39;
break;
case 36:return 40;
break;
case 37:return 35;
break;
case 38:return 36;
break;
case 39:return 37;
break;
case 40:return 41;
break;
case 41:return 38;
break;
case 42:return 42;
break;
case 43:return 44;
break;
case 44:return 43;
break;
case 45:return 'Tsgb';
break;
case 46:return 32;
break;
case 47:return 'Tprintf';
break;
case 48:console.log("numero: "+ yy_.yytext);return 33;
break;
case 49:console.log("id: "+yy_.yytext);return 19;
break;
case 50:console.log("id: "+yy_.yytext);return 17;
break;
case 51:console.log("id: "+yy_.yytext);return 14;
break;
case 52:console.log("eof");return 5;
break;
case 53:console.log("error lexico");return 'INVALID';
break;
}
},
rules: [/^(?:[\r\n\s]+)/,/^(?:\/\*[^?]*\*\/)/,/^(?:\/\/[^\n]*)/,/^(?:void\b)/,/^(?:H\b)/,/^(?:S\b)/,/^(?:P\b)/,/^(?:Heap\b)/,/^(?:Pool\b)/,/^(?:Stack\b)/,/^(?:\$\$_SGC\b)/,/^(?:goto\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?::)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\$\$_getBool\b)/,/^(?:\$\$_getNum\b)/,/^(?:\$\$_outStr\b)/,/^(?:\$\$_outNum\b)/,/^(?:\$\$_inStr\b)/,/^(?:\$\$_inNum\b)/,/^(?:\$\$_show\b)/,/^(?:\$\$_getRandom\b)/,/^(?:\$\$_getArrLengh\b)/,/^(?:\$\$_getStrLengh\b)/,/^(?:\$\$_SGB\b)/,/^(?:Exit\b)/,/^(?:printf\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:t[0-9]+)/,/^(?:L[0-9]+)/,/^(?:[A-Za-z][_0-9A-Za-z]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Codigo3D;
exports.Parser = Codigo3D.Parser;
exports.parse = function () { return Codigo3D.parse.apply(Codigo3D, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}